!function(t){var e={};function o(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=t,o.c=e,o.d=function(t,e,s){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(o.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(s,r,function(e){return t[e]}.bind(null,r));return s},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";o.r(e);class s{constructor(){this.observers=[]}subscribe(t){this.observers.push(t)}unsubscribe(t){this.observers=this.observers.filter(e=>e!==t)}notify(t){this.observers.forEach(e=>e(t))}}class r extends s{constructor(t){super(),this.data=t||{}}getRaw(){return this.data}set(t,e){this.data[t]=e,this.notify(e)}get(t){if(t)return this.data[t]}}class n extends r{constructor(t){super({todos:t})}}class i{constructor(){this.model=new n([])}getTodos(){return this.model.set("todos",[{id:1,title:"Some todo 1",completed:!1},{id:2,title:"Some todo 2",completed:!1}]),this.model}}class c{constructor(t){this.service=t.services.todos,this.model=t.model,this.model.subscribe(t=>{this.render(t)}),this.model.notify(this.model.get("todos"))}render(t){console.log(t)}}class u{constructor(){this.todosService=new i,this.todosModule=this.todosService.getTodos(),this.TodosComponent=new c({services:{todos:this.todosService},model:this.todosModule})}}o.d(e,"App",function(){return d});class d{constructor(){this.todos=new u}}new d}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYXBwL2pzL21vZHVsZXMvY29yZS9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL2FwcC9qcy9tb2R1bGVzL2NvcmUvbW9kZWwuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2pzL21vZHVsZXMvdG9kb3MvbW9kZWxzL3RvZG9zLm1vZGVsLmpzIiwid2VicGFjazovLy8uL2FwcC9qcy9tb2R1bGVzL3RvZG9zL3NlcnZpY2VzL3RvZG9zLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2pzL21vZHVsZXMvdG9kb3MvY29tcG9uZW50cy90b2Rvcy5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2pzL21vZHVsZXMvdG9kb3MvY29tcG9uZW50cy90b2Rvcy5jb250YWluZXIuY29tcG9uZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvanMvYXBwLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiT2JzZXJ2YWJsZSIsInRoaXMiLCJvYnNlcnZlcnMiLCJmIiwicHVzaCIsImZpbHRlciIsIm9ic2VydmVyIiwiZGF0YSIsImZvckVhY2giLCJzdXBlciIsIm5vdGlmeSIsInRvZG9zIiwibW9kZWwiLCJzZXQiLCJpZCIsInRpdGxlIiwiY29tcGxldGVkIiwiVG9kb3NDb21wb25lbnQiLCJwcm92aWRlcnMiLCJzZXJ2aWNlIiwic2VydmljZXMiLCJzdWJzY3JpYmUiLCJyZXMiLCJyZW5kZXIiLCJjb25zb2xlIiwibG9nIiwidG9kb3NTZXJ2aWNlIiwidG9kb3NNb2R1bGUiLCJnZXRUb2RvcyJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPckIsRUFBb0JVLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ6QixFQUFvQjZCLEVBQUksU0FBUzFCLEdBQ2hDLElBQUlTLEVBQVNULEdBQVVBLEVBQU9xQixXQUM3QixXQUF3QixPQUFPckIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUgsRUFBb0JVLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJaLEVBQW9CYSxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6Ry9CLEVBQW9Ca0MsRUFBSSxHQUlqQmxDLEVBQW9CQSxFQUFvQm1DLEVBQUksRyxzQ0NsRjlDLE1BQU1DLEVBQ1QsY0FDSUMsS0FBS0MsVUFBWSxHQUdyQixVQUFVQyxHQUNORixLQUFLQyxVQUFVRSxLQUFLRCxHQUd4QixZQUFZQSxHQUNSRixLQUFLQyxVQUFZRCxLQUFLQyxVQUFVRyxPQUFPQyxHQUFZQSxJQUFhSCxHQUdwRSxPQUFPSSxHQUNITixLQUFLQyxVQUFVTSxRQUFRRixHQUFZQSxFQUFTQyxLQ1o3QyxNQUFNLFVBQWNQLEVBQ3ZCLFlBQVlPLEdBQ1JFLFFBQ0FSLEtBQUtNLEtBQU9BLEdBQVEsR0FHeEIsU0FDSSxPQUFPTixLQUFLTSxLQUdoQixJQUFJaEIsRUFBS04sR0FDTGdCLEtBQUtNLEtBQUtoQixHQUFPTixFQUNqQmdCLEtBQUtTLE9BQU96QixHQUdoQixJQUFJTSxHQUNBLEdBQUlBLEVBQUssT0FBT1UsS0FBS00sS0FBS2hCLElDaEIzQixNQUFNLFVBQW1CLEVBQzVCLFlBQVlvQixHQUNSRixNQUFNLENBQUVFLFdDRlQsTUFBTSxFQUNULGNBQ0lWLEtBQUtXLE1BQVEsSUFBSSxFQUFXLElBR2hDLFdBYUksT0FEQVgsS0FBS1csTUFBTUMsSUFBSSxRQVhBLENBQUMsQ0FDUkMsR0FBSSxFQUNKQyxNQUFPLGNBQ1BDLFdBQVcsR0FFZixDQUNJRixHQUFJLEVBQ0pDLE1BQU8sY0FDUEMsV0FBVyxLQUlaZixLQUFLVyxPQ3BCYixNQUFNSyxFQUNULFlBQVlDLEdBQ1JqQixLQUFLa0IsUUFBVUQsRUFBVUUsU0FBU1QsTUFDbENWLEtBQUtXLE1BQVFNLEVBQVVOLE1BQ3ZCWCxLQUFLVyxNQUFNUyxVQUFVQyxJQUNqQnJCLEtBQUtzQixPQUFPRCxLQUVoQnJCLEtBQUtXLE1BQU1GLE9BQU9ULEtBQUtXLE1BQU0vQixJQUFJLFVBRXJDLE9BQU84QixHQUNIYSxRQUFRQyxJQUFJZCxJQ1BiLE1BQU0sRUFDVCxjQUNJVixLQUFLeUIsYUFBZSxJQUFJLEVBQ3hCekIsS0FBSzBCLFlBQWMxQixLQUFLeUIsYUFBYUUsV0FDckMzQixLQUFLZ0IsZUFBaUIsSUFBSUEsRUFBZSxDQUNyQ0csU0FBVSxDQUNOVCxNQUFPVixLQUFLeUIsY0FFaEJkLE1BQU9YLEtBQUswQixlQ1h4QixrQ0FFTyxNQUFNLEVBQ1QsY0FDSTFCLEtBQUtVLE1BQVEsSUFBSSxHQUt6QixJQUFJIiwiZmlsZSI6ImFwcC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJleHBvcnQgY2xhc3MgT2JzZXJ2YWJsZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgfVxuXG4gICAgc3Vic2NyaWJlKGYpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChmKVxuICAgIH1cblxuICAgIHVuc3Vic2NyaWJlKGYpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycy5maWx0ZXIob2JzZXJ2ZXIgPT4gb2JzZXJ2ZXIgIT09IGYpO1xuICAgIH1cblxuICAgIG5vdGlmeShkYXRhKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzLmZvckVhY2gob2JzZXJ2ZXIgPT4gb2JzZXJ2ZXIoZGF0YSkpXG4gICAgfVxuXG59IiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuL29ic2VydmFibGVcIjtcblxuZXhwb3J0IGNsYXNzIE1vZGVsIGV4dGVuZHMgT2JzZXJ2YWJsZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIH1cblxuICAgIGdldFJhdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVxuICAgIH1cblxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGF0YVtrZXldID0gdmFsdWU7XG4gICAgICAgIHRoaXMubm90aWZ5KHZhbHVlKTtcbiAgICB9XG5cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIGlmIChrZXkpIHJldHVybiB0aGlzLmRhdGFba2V5XTtcblxuICAgIH1cblxufSIsImltcG9ydCB7IE1vZGVsIH0gZnJvbSAnLi4vLi4vY29yZS9tb2RlbCdcblxuZXhwb3J0IGNsYXNzIFRvZG9zTW9kZWwgZXh0ZW5kcyBNb2RlbCB7XG4gICAgY29uc3RydWN0b3IodG9kb3MpIHtcbiAgICAgICAgc3VwZXIoeyB0b2RvcyB9KTtcbiAgICB9XG59IiwiaW1wb3J0IHsgVG9kb3NNb2RlbCB9IGZyb20gXCIuLi9tb2RlbHMvdG9kb3MubW9kZWxcIjtcblxuZXhwb3J0IGNsYXNzIFRvZG9zU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubW9kZWwgPSBuZXcgVG9kb3NNb2RlbChbXSk7XG4gICAgfVxuXG4gICAgZ2V0VG9kb3MoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFt7XG4gICAgICAgICAgICAgICAgaWQ6IDEsXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdTb21lIHRvZG8gMScsXG4gICAgICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogMixcbiAgICAgICAgICAgICAgICB0aXRsZTogJ1NvbWUgdG9kbyAyJyxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgICAgIHRoaXMubW9kZWwuc2V0KFwidG9kb3NcIiwgcmVzdWx0KVxuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbDtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIFRvZG9zQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlcnMpIHtcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gcHJvdmlkZXJzLnNlcnZpY2VzLnRvZG9zXG4gICAgICAgIHRoaXMubW9kZWwgPSBwcm92aWRlcnMubW9kZWxcbiAgICAgICAgdGhpcy5tb2RlbC5zdWJzY3JpYmUocmVzID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKHJlcyk7XG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMubW9kZWwubm90aWZ5KHRoaXMubW9kZWwuZ2V0KCd0b2RvcycpKTtcbiAgICB9XG4gICAgcmVuZGVyKHRvZG9zKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHRvZG9zKVxuICAgIH1cbn0iLCJpbXBvcnQgeyBUb2Rvc1NlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvdG9kb3Muc2VydmljZVwiO1xuaW1wb3J0IHsgVG9kb3NDb21wb25lbnQgfSBmcm9tIFwiLi90b2Rvcy5jb21wb25lbnRcIjtcblxuZXhwb3J0IGNsYXNzIFRvZG9zQ29udGFpbmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy50b2Rvc1NlcnZpY2UgPSBuZXcgVG9kb3NTZXJ2aWNlXG4gICAgICAgIHRoaXMudG9kb3NNb2R1bGUgPSB0aGlzLnRvZG9zU2VydmljZS5nZXRUb2RvcygpO1xuICAgICAgICB0aGlzLlRvZG9zQ29tcG9uZW50ID0gbmV3IFRvZG9zQ29tcG9uZW50KHtcbiAgICAgICAgICAgIHNlcnZpY2VzOiB7XG4gICAgICAgICAgICAgICAgdG9kb3M6IHRoaXMudG9kb3NTZXJ2aWNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbW9kZWw6IHRoaXMudG9kb3NNb2R1bGVcbiAgICAgICAgfSlcbiAgICB9XG59IiwiaW1wb3J0IHsgVG9kb3NDb250YWluZXIgfSBmcm9tICcuL21vZHVsZXMvdG9kb3MvY29tcG9uZW50cy90b2Rvcy5jb250YWluZXIuY29tcG9uZW50cyc7XG5cbmV4cG9ydCBjbGFzcyBBcHAge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnRvZG9zID0gbmV3IFRvZG9zQ29udGFpbmVyO1xuXG4gICAgfVxufVxuXG5uZXcgQXBwKCk7Il0sInNvdXJjZVJvb3QiOiIifQ==